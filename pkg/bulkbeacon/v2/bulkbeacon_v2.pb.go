// Copyright 2021 NSONE, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: bulkbeacon_v2.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

////
// The network location from which a measurement was taken. Pulsar stores data at Geo+ASN
// granularity. If an IP address is specified we will use it to determine Geo+ASN. The full
// IP address is not stored by our systems.
type IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 host address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{0}
}

func (x *IPAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

////
// The Geo+ASN location from which a measurement was taken.
type GeoAsn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 3166-1 (alpha-2) country code. This value is REQUIRED.
	GeoCountry string `protobuf:"bytes,1,opt,name=geo_country,json=geoCountry,proto3" json:"geo_country,omitempty"`
	// ISO 3166-2 subdivision code. This value is OPTIONAL.
	GeoSubdiv string `protobuf:"bytes,2,opt,name=geo_subdiv,json=geoSubdiv,proto3" json:"geo_subdiv,omitempty"`
	// ASN (network number). This value is OPTIONAL.
	Asn int32 `protobuf:"varint,3,opt,name=asn,proto3" json:"asn,omitempty"`
}

func (x *GeoAsn) Reset() {
	*x = GeoAsn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoAsn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoAsn) ProtoMessage() {}

func (x *GeoAsn) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoAsn.ProtoReflect.Descriptor instead.
func (*GeoAsn) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{1}
}

func (x *GeoAsn) GetGeoCountry() string {
	if x != nil {
		return x.GeoCountry
	}
	return ""
}

func (x *GeoAsn) GetGeoSubdiv() string {
	if x != nil {
		return x.GeoSubdiv
	}
	return ""
}

func (x *GeoAsn) GetAsn() int32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

////
// Unification of attributes that identify the source of a measurement and the NS1 customer
// owning the data.
type Attribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. Associated measurement will we discarded without this.
	Appid string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	// REQUIRED. Associated measurement will we discarded without this.
	Jobid string `protobuf:"bytes,2,opt,name=jobid,proto3" json:"jobid,omitempty"`
	// REQUIRED. Where the measurement was taken, or the location it should be associated with.
	//
	// Types that are assignable to Location:
	//	*Attribution_Ip
	//	*Attribution_GeoAsn
	Location isAttribution_Location `protobuf_oneof:"location"`
}

func (x *Attribution) Reset() {
	*x = Attribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribution) ProtoMessage() {}

func (x *Attribution) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribution.ProtoReflect.Descriptor instead.
func (*Attribution) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{2}
}

func (x *Attribution) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *Attribution) GetJobid() string {
	if x != nil {
		return x.Jobid
	}
	return ""
}

func (m *Attribution) GetLocation() isAttribution_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *Attribution) GetIp() *IPAddress {
	if x, ok := x.GetLocation().(*Attribution_Ip); ok {
		return x.Ip
	}
	return nil
}

func (x *Attribution) GetGeoAsn() *GeoAsn {
	if x, ok := x.GetLocation().(*Attribution_GeoAsn); ok {
		return x.GeoAsn
	}
	return nil
}

type isAttribution_Location interface {
	isAttribution_Location()
}

type Attribution_Ip struct {
	Ip *IPAddress `protobuf:"bytes,3,opt,name=ip,proto3,oneof"`
}

type Attribution_GeoAsn struct {
	GeoAsn *GeoAsn `protobuf:"bytes,4,opt,name=geo_asn,json=geoAsn,proto3,oneof"`
}

func (*Attribution_Ip) isAttribution_Location() {}

func (*Attribution_GeoAsn) isAttribution_Location() {}

////
// Metadata concerning "static" metrics.
type StaticMetricMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time-to-live value in seconds. This determines how long we will retain this data and thus
	// use it for making routing decisions.
	// This value is OPTIONAL but since all data points require a TTL if this value is not present
	// we will use the TTL value from associated Pulsar app/job.
	Ttl int32 `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *StaticMetricMetadata) Reset() {
	*x = StaticMetricMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticMetricMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticMetricMetadata) ProtoMessage() {}

func (x *StaticMetricMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticMetricMetadata.ProtoReflect.Descriptor instead.
func (*StaticMetricMetadata) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{3}
}

func (x *StaticMetricMetadata) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

////
// A simple, single latency value. Use this if your measurement process captures only end-to-end
// timings of TTLB (time to last byte).
type LatencyMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LatencyMetric) Reset() {
	*x = LatencyMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyMetric) ProtoMessage() {}

func (x *LatencyMetric) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyMetric.ProtoReflect.Descriptor instead.
func (*LatencyMetric) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{4}
}

func (x *LatencyMetric) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

////
// A single value of uninterpreted dimension.
type PerformanceScoreMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Meta  *StaticMetricMetadata `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *PerformanceScoreMetric) Reset() {
	*x = PerformanceScoreMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceScoreMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceScoreMetric) ProtoMessage() {}

func (x *PerformanceScoreMetric) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceScoreMetric.ProtoReflect.Descriptor instead.
func (*PerformanceScoreMetric) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{5}
}

func (x *PerformanceScoreMetric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PerformanceScoreMetric) GetMeta() *StaticMetricMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

type AvailabilityMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Final HTTP status code resulting from fetching this data. If you don't know
	// this value (or can't observe it) use 200 to indicate success and 650 to indicate failure.
	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *AvailabilityMetric) Reset() {
	*x = AvailabilityMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityMetric) ProtoMessage() {}

func (x *AvailabilityMetric) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityMetric.ProtoReflect.Descriptor instead.
func (*AvailabilityMetric) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{6}
}

func (x *AvailabilityMetric) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type AvailabilityScoreMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An availability "score" between 0 and 1.0 where 0 means totally unavailable and 1.0 mean
	// totally available.
	Value float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Meta  *StaticMetricMetadata `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *AvailabilityScoreMetric) Reset() {
	*x = AvailabilityScoreMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityScoreMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityScoreMetric) ProtoMessage() {}

func (x *AvailabilityScoreMetric) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityScoreMetric.ProtoReflect.Descriptor instead.
func (*AvailabilityScoreMetric) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{7}
}

func (x *AvailabilityScoreMetric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AvailabilityScoreMetric) GetMeta() *StaticMetricMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Metric:
	//	*Payload_Latency
	//	*Payload_PerfScore
	//	*Payload_Avail
	//	*Payload_AvailScore
	Metric isPayload_Metric `protobuf_oneof:"metric"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{8}
}

func (m *Payload) GetMetric() isPayload_Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (x *Payload) GetLatency() *LatencyMetric {
	if x, ok := x.GetMetric().(*Payload_Latency); ok {
		return x.Latency
	}
	return nil
}

func (x *Payload) GetPerfScore() *PerformanceScoreMetric {
	if x, ok := x.GetMetric().(*Payload_PerfScore); ok {
		return x.PerfScore
	}
	return nil
}

func (x *Payload) GetAvail() *AvailabilityMetric {
	if x, ok := x.GetMetric().(*Payload_Avail); ok {
		return x.Avail
	}
	return nil
}

func (x *Payload) GetAvailScore() *AvailabilityScoreMetric {
	if x, ok := x.GetMetric().(*Payload_AvailScore); ok {
		return x.AvailScore
	}
	return nil
}

type isPayload_Metric interface {
	isPayload_Metric()
}

type Payload_Latency struct {
	Latency *LatencyMetric `protobuf:"bytes,1,opt,name=latency,proto3,oneof"`
}

type Payload_PerfScore struct {
	PerfScore *PerformanceScoreMetric `protobuf:"bytes,2,opt,name=perf_score,json=perfScore,proto3,oneof"`
}

type Payload_Avail struct {
	Avail *AvailabilityMetric `protobuf:"bytes,3,opt,name=avail,proto3,oneof"`
}

type Payload_AvailScore struct {
	AvailScore *AvailabilityScoreMetric `protobuf:"bytes,4,opt,name=avail_score,json=availScore,proto3,oneof"`
}

func (*Payload_Latency) isPayload_Metric() {}

func (*Payload_PerfScore) isPayload_Metric() {}

func (*Payload_Avail) isPayload_Metric() {}

func (*Payload_AvailScore) isPayload_Metric() {}

type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the Ability to send static beacons is set on the app/job level
	// Maybe TTL goes here?
	Attribution *Attribution `protobuf:"bytes,1,opt,name=attribution,proto3" json:"attribution,omitempty"`
	Payloads    []*Payload   `protobuf:"bytes,3,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{9}
}

func (x *Metrics) GetAttribution() *Attribution {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *Metrics) GetPayloads() []*Payload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type Beacons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAttribution    *Attribution          `protobuf:"bytes,1,opt,name=default_attribution,json=defaultAttribution,proto3" json:"default_attribution,omitempty"`
	DefaultStaticMetadata *StaticMetricMetadata `protobuf:"bytes,2,opt,name=default_static_metadata,json=defaultStaticMetadata,proto3" json:"default_static_metadata,omitempty"`
	Metrics               []*Metrics            `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *Beacons) Reset() {
	*x = Beacons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacons) ProtoMessage() {}

func (x *Beacons) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacons.ProtoReflect.Descriptor instead.
func (*Beacons) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{10}
}

func (x *Beacons) GetDefaultAttribution() *Attribution {
	if x != nil {
		return x.DefaultAttribution
	}
	return nil
}

func (x *Beacons) GetDefaultStaticMetadata() *StaticMetricMetadata {
	if x != nil {
		return x.DefaultStaticMetadata
	}
	return nil
}

func (x *Beacons) GetMetrics() []*Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type IngestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processed uint32 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	Failed    uint32 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *IngestResult) Reset() {
	*x = IngestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResult) ProtoMessage() {}

func (x *IngestResult) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResult.ProtoReflect.Descriptor instead.
func (*IngestResult) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{11}
}

func (x *IngestResult) GetProcessed() uint32 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *IngestResult) GetFailed() uint32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

var File_bulkbeacon_v2_proto protoreflect.FileDescriptor

var file_bulkbeacon_v2_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x76, 0x32, 0x22, 0x25, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x06, 0x47,
	0x65, 0x6f, 0x41, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x75,
	0x62, 0x64, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x30, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x6f, 0x41, 0x73, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x41, 0x73,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x25, 0x0a, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67,
	0x0a, 0x16, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68,
	0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x7b, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76,
	0x32, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x07, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12,
	0x4b, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x17,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x6c,
	0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x32, 0x56, 0x0a, 0x13, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x76, 0x32, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x1a, 0x1b, 0x2e, 0x62, 0x75, 0x6c,
	0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x73, 0x31, 0x2f, 0x70, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x2d, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bulkbeacon_v2_proto_rawDescOnce sync.Once
	file_bulkbeacon_v2_proto_rawDescData = file_bulkbeacon_v2_proto_rawDesc
)

func file_bulkbeacon_v2_proto_rawDescGZIP() []byte {
	file_bulkbeacon_v2_proto_rawDescOnce.Do(func() {
		file_bulkbeacon_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_bulkbeacon_v2_proto_rawDescData)
	})
	return file_bulkbeacon_v2_proto_rawDescData
}

var file_bulkbeacon_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_bulkbeacon_v2_proto_goTypes = []interface{}{
	(*IPAddress)(nil),               // 0: bulkbeacon_v2.IPAddress
	(*GeoAsn)(nil),                  // 1: bulkbeacon_v2.GeoAsn
	(*Attribution)(nil),             // 2: bulkbeacon_v2.Attribution
	(*StaticMetricMetadata)(nil),    // 3: bulkbeacon_v2.StaticMetricMetadata
	(*LatencyMetric)(nil),           // 4: bulkbeacon_v2.LatencyMetric
	(*PerformanceScoreMetric)(nil),  // 5: bulkbeacon_v2.PerformanceScoreMetric
	(*AvailabilityMetric)(nil),      // 6: bulkbeacon_v2.AvailabilityMetric
	(*AvailabilityScoreMetric)(nil), // 7: bulkbeacon_v2.AvailabilityScoreMetric
	(*Payload)(nil),                 // 8: bulkbeacon_v2.Payload
	(*Metrics)(nil),                 // 9: bulkbeacon_v2.Metrics
	(*Beacons)(nil),                 // 10: bulkbeacon_v2.Beacons
	(*IngestResult)(nil),            // 11: bulkbeacon_v2.IngestResult
}
var file_bulkbeacon_v2_proto_depIdxs = []int32{
	0,  // 0: bulkbeacon_v2.Attribution.ip:type_name -> bulkbeacon_v2.IPAddress
	1,  // 1: bulkbeacon_v2.Attribution.geo_asn:type_name -> bulkbeacon_v2.GeoAsn
	3,  // 2: bulkbeacon_v2.PerformanceScoreMetric.meta:type_name -> bulkbeacon_v2.StaticMetricMetadata
	3,  // 3: bulkbeacon_v2.AvailabilityScoreMetric.meta:type_name -> bulkbeacon_v2.StaticMetricMetadata
	4,  // 4: bulkbeacon_v2.Payload.latency:type_name -> bulkbeacon_v2.LatencyMetric
	5,  // 5: bulkbeacon_v2.Payload.perf_score:type_name -> bulkbeacon_v2.PerformanceScoreMetric
	6,  // 6: bulkbeacon_v2.Payload.avail:type_name -> bulkbeacon_v2.AvailabilityMetric
	7,  // 7: bulkbeacon_v2.Payload.avail_score:type_name -> bulkbeacon_v2.AvailabilityScoreMetric
	2,  // 8: bulkbeacon_v2.Metrics.attribution:type_name -> bulkbeacon_v2.Attribution
	8,  // 9: bulkbeacon_v2.Metrics.payloads:type_name -> bulkbeacon_v2.Payload
	2,  // 10: bulkbeacon_v2.Beacons.default_attribution:type_name -> bulkbeacon_v2.Attribution
	3,  // 11: bulkbeacon_v2.Beacons.default_static_metadata:type_name -> bulkbeacon_v2.StaticMetricMetadata
	9,  // 12: bulkbeacon_v2.Beacons.metrics:type_name -> bulkbeacon_v2.Metrics
	10, // 13: bulkbeacon_v2.PulsarDataIngestion.Ingest:input_type -> bulkbeacon_v2.Beacons
	11, // 14: bulkbeacon_v2.PulsarDataIngestion.Ingest:output_type -> bulkbeacon_v2.IngestResult
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bulkbeacon_v2_proto_init() }
func file_bulkbeacon_v2_proto_init() {
	if File_bulkbeacon_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bulkbeacon_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoAsn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticMetricMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceScoreMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityScoreMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beacons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bulkbeacon_v2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Attribution_Ip)(nil),
		(*Attribution_GeoAsn)(nil),
	}
	file_bulkbeacon_v2_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Payload_Latency)(nil),
		(*Payload_PerfScore)(nil),
		(*Payload_Avail)(nil),
		(*Payload_AvailScore)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bulkbeacon_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bulkbeacon_v2_proto_goTypes,
		DependencyIndexes: file_bulkbeacon_v2_proto_depIdxs,
		MessageInfos:      file_bulkbeacon_v2_proto_msgTypes,
	}.Build()
	File_bulkbeacon_v2_proto = out.File
	file_bulkbeacon_v2_proto_rawDesc = nil
	file_bulkbeacon_v2_proto_goTypes = nil
	file_bulkbeacon_v2_proto_depIdxs = nil
}
