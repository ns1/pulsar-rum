// Copyright 2020 NSONE, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: bulkbeacon_v2.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

////
// Classification of the device type on which a measurement was taken. Default is UNKNOWN.
type DeviceType int32

const (
	DeviceType_UNKNOWN         DeviceType = 0
	DeviceType_DESKTOP         DeviceType = 1
	DeviceType_MOBILE          DeviceType = 2
	DeviceType_GENERIC_SET_TOP DeviceType = 3
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "DESKTOP",
		2: "MOBILE",
		3: "GENERIC_SET_TOP",
	}
	DeviceType_value = map[string]int32{
		"UNKNOWN":         0,
		"DESKTOP":         1,
		"MOBILE":          2,
		"GENERIC_SET_TOP": 3,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_bulkbeacon_v2_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_bulkbeacon_v2_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{0}
}

////
// Specifies the network location from which a measurement was taken. Either
// IP address OR Geo+ASN information maybe be provided -- but not both.  If both
// are provided then Geo+ASN takes precedence.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 host address.
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// ISO 3166-1 (alpha-2) country code. If providing Geo+ASN info this value is
	// REQUIRED.
	GeoCountry string `protobuf:"bytes,2,opt,name=geo_country,json=geoCountry,proto3" json:"geo_country,omitempty"`
	// ISO 3166-2 subdivision code. If providing Geo+ASN info this value is OPTIONAL.
	GeoSubdiv string `protobuf:"bytes,3,opt,name=geo_subdiv,json=geoSubdiv,proto3" json:"geo_subdiv,omitempty"`
	// Public ASN. If providing Geo+ASN info this value is OPTIONAL.
	Asn int32 `protobuf:"varint,4,opt,name=asn,proto3" json:"asn,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Location) GetGeoCountry() string {
	if x != nil {
		return x.GeoCountry
	}
	return ""
}

func (x *Location) GetGeoSubdiv() string {
	if x != nil {
		return x.GeoSubdiv
	}
	return ""
}

func (x *Location) GetAsn() int32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

////
// Unification of attributes that identify the originator (provider) of a measurement and
// the owner of the data.
type Attribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. Associated measurement will we discarded without this.
	Jobid string `protobuf:"bytes,1,opt,name=jobid,proto3" json:"jobid,omitempty"`
	// REQUIRED. Associated measurement will we discarded without this.
	Location *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// OPTIONAL.
	DeviceType DeviceType `protobuf:"varint,3,opt,name=device_type,json=deviceType,proto3,enum=bulkbeacon.DeviceType" json:"device_type,omitempty"`
}

func (x *Attribution) Reset() {
	*x = Attribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribution) ProtoMessage() {}

func (x *Attribution) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribution.ProtoReflect.Descriptor instead.
func (*Attribution) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{1}
}

func (x *Attribution) GetJobid() string {
	if x != nil {
		return x.Jobid
	}
	return ""
}

func (x *Attribution) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Attribution) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_UNKNOWN
}

////
// Detailed measurement of performance. Time values are absolute durations.
type DetailedPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsLookupMs        int32 `protobuf:"varint,1,opt,name=dns_lookup_ms,json=dnsLookupMs,proto3" json:"dns_lookup_ms,omitempty"`
	TransportConnectMs int32 `protobuf:"varint,2,opt,name=transport_connect_ms,json=transportConnectMs,proto3" json:"transport_connect_ms,omitempty"`
	TlsConnectMs       int32 `protobuf:"varint,3,opt,name=tls_connect_ms,json=tlsConnectMs,proto3" json:"tls_connect_ms,omitempty"`
	WaitingMs          int32 `protobuf:"varint,4,opt,name=waiting_ms,json=waitingMs,proto3" json:"waiting_ms,omitempty"`
	// One of TTFB or TTLB is REQUIRED. Providing both is valid.
	TimeToFirstByteMs int32 `protobuf:"varint,5,opt,name=time_to_first_byte_ms,json=timeToFirstByteMs,proto3" json:"time_to_first_byte_ms,omitempty"`
	TimeToLastByteMs  int32 `protobuf:"varint,6,opt,name=time_to_last_byte_ms,json=timeToLastByteMs,proto3" json:"time_to_last_byte_ms,omitempty"`
}

func (x *DetailedPerformance) Reset() {
	*x = DetailedPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedPerformance) ProtoMessage() {}

func (x *DetailedPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedPerformance.ProtoReflect.Descriptor instead.
func (*DetailedPerformance) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{2}
}

func (x *DetailedPerformance) GetDnsLookupMs() int32 {
	if x != nil {
		return x.DnsLookupMs
	}
	return 0
}

func (x *DetailedPerformance) GetTransportConnectMs() int32 {
	if x != nil {
		return x.TransportConnectMs
	}
	return 0
}

func (x *DetailedPerformance) GetTlsConnectMs() int32 {
	if x != nil {
		return x.TlsConnectMs
	}
	return 0
}

func (x *DetailedPerformance) GetWaitingMs() int32 {
	if x != nil {
		return x.WaitingMs
	}
	return 0
}

func (x *DetailedPerformance) GetTimeToFirstByteMs() int32 {
	if x != nil {
		return x.TimeToFirstByteMs
	}
	return 0
}

func (x *DetailedPerformance) GetTimeToLastByteMs() int32 {
	if x != nil {
		return x.TimeToLastByteMs
	}
	return 0
}

////
// A simple, single latency value. Use this instead of DetailedPerformance if your
// measurement process captures only end-to-end timings.
type SimpleLatency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMs int32 `protobuf:"varint,1,opt,name=value_ms,json=valueMs,proto3" json:"value_ms,omitempty"`
}

func (x *SimpleLatency) Reset() {
	*x = SimpleLatency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleLatency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleLatency) ProtoMessage() {}

func (x *SimpleLatency) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleLatency.ProtoReflect.Descriptor instead.
func (*SimpleLatency) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleLatency) GetValueMs() int32 {
	if x != nil {
		return x.ValueMs
	}
	return 0
}

////
// A single value of uninterpreted dimension. Use this if your measurement process
// does not capture values that fit in either DetailedPerformance or SimpleLatency
// categories.
type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{4}
}

func (x *Score) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

////
// Data for a single Attribution. That is: some JobID, from some network location, on
// some type of device.
type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp (in unix epoch nanoseconds) the data in this object was observed.
	// If not provided the timestamp that a message containing this Payload was
	// received by NS1 servers will be used.
	TimstampEpochNs uint64 `protobuf:"fixed64,1,opt,name=timstamp_epoch_ns,json=timstampEpochNs,proto3" json:"timstamp_epoch_ns,omitempty"`
	// Final HTTP status code resulting from fetching this data. If you don't know
	// this value (or can't observe it) use 200 to indicate success and 650 to indicate failure.
	StatusCode int32 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Overrides the attribution set on the Measurement level. This is OPTIONAL.
	Attribution *Attribution `protobuf:"bytes,3,opt,name=attribution,proto3" json:"attribution,omitempty"`
	// Time-to-live value in seconds. This determines how long we will use this data for
	// making routing decisions for the associated attribution.
	// This is OPTIONAL, unless the payload corresponds to a Static Beacon:
	// - If is not a static beacon and is not provided, the default value from the
	// associated Pulsar app/job will be used.
	// - If it's a static beacon and is not provided, the beacon will be rejected.
	DataTtl int32 `protobuf:"varint,7,opt,name=data_ttl,json=dataTtl,proto3" json:"data_ttl,omitempty"`
	// Types that are assignable to Value:
	//	*Payload_Simple
	//	*Payload_Detailed
	//	*Payload_Score
	Value isPayload_Value `protobuf_oneof:"value"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{5}
}

func (x *Payload) GetTimstampEpochNs() uint64 {
	if x != nil {
		return x.TimstampEpochNs
	}
	return 0
}

func (x *Payload) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Payload) GetAttribution() *Attribution {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *Payload) GetDataTtl() int32 {
	if x != nil {
		return x.DataTtl
	}
	return 0
}

func (m *Payload) GetValue() isPayload_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Payload) GetSimple() *SimpleLatency {
	if x, ok := x.GetValue().(*Payload_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *Payload) GetDetailed() *DetailedPerformance {
	if x, ok := x.GetValue().(*Payload_Detailed); ok {
		return x.Detailed
	}
	return nil
}

func (x *Payload) GetScore() *Score {
	if x, ok := x.GetValue().(*Payload_Score); ok {
		return x.Score
	}
	return nil
}

type isPayload_Value interface {
	isPayload_Value()
}

type Payload_Simple struct {
	Simple *SimpleLatency `protobuf:"bytes,4,opt,name=simple,proto3,oneof"`
}

type Payload_Detailed struct {
	Detailed *DetailedPerformance `protobuf:"bytes,5,opt,name=detailed,proto3,oneof"`
}

type Payload_Score struct {
	Score *Score `protobuf:"bytes,6,opt,name=score,proto3,oneof"`
}

func (*Payload_Simple) isPayload_Value() {}

func (*Payload_Detailed) isPayload_Value() {}

func (*Payload_Score) isPayload_Value() {}

////
// A container for multiple Payloads and some top-level defaults.
type Measurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default attribution for payloads that do not provide their own Attribution object.
	// This is OPTIONAL but not providing it means any Payload not containing an Attribution
	// will be discarded.
	Attribution *Attribution `protobuf:"bytes,1,opt,name=attribution,proto3" json:"attribution,omitempty"`
	// May contain data from any number of JobIDs but those jobs must all be owned by the
	// same AppID -- which is implied by the Beacon object that contains this Measurement.
	Payloads []*Payload `protobuf:"bytes,2,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *Measurement) Reset() {
	*x = Measurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Measurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurement) ProtoMessage() {}

func (x *Measurement) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurement.ProtoReflect.Descriptor instead.
func (*Measurement) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{6}
}

func (x *Measurement) GetAttribution() *Attribution {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *Measurement) GetPayloads() []*Payload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type Beacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        string         `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	Signature    []byte         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Measurements []*Measurement `protobuf:"bytes,3,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *Beacon) Reset() {
	*x = Beacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacon) ProtoMessage() {}

func (x *Beacon) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacon.ProtoReflect.Descriptor instead.
func (*Beacon) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{7}
}

func (x *Beacon) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *Beacon) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Beacon) GetMeasurements() []*Measurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type Beacons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacons []*Beacon `protobuf:"bytes,1,rep,name=beacons,proto3" json:"beacons,omitempty"`
}

func (x *Beacons) Reset() {
	*x = Beacons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacons) ProtoMessage() {}

func (x *Beacons) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacons.ProtoReflect.Descriptor instead.
func (*Beacons) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{8}
}

func (x *Beacons) GetBeacons() []*Beacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

type IngestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processed uint32 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	Failed    uint32 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *IngestResult) Reset() {
	*x = IngestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bulkbeacon_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResult) ProtoMessage() {}

func (x *IngestResult) ProtoReflect() protoreflect.Message {
	mi := &file_bulkbeacon_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResult.ProtoReflect.Descriptor instead.
func (*IngestResult) Descriptor() ([]byte, []int) {
	return file_bulkbeacon_v2_proto_rawDescGZIP(), []int{9}
}

func (x *IngestResult) GetProcessed() uint32 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *IngestResult) GetFailed() uint32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

var File_bulkbeacon_v2_proto protoreflect.FileDescriptor

var file_bulkbeacon_v2_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x22, 0x7b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x22, 0x8e,
	0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x75,
	0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x92, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x6e, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x4d, 0x73, 0x22, 0x2a, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x73,
	0x22, 0x1d, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd4, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x54, 0x74, 0x6c, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x79, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x75, 0x6c,
	0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x22, 0x79, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x07,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2a, 0x47, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f,
	0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x4f, 0x50, 0x10, 0x03, 0x32, 0x50, 0x0a, 0x13, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x1a, 0x18, 0x2e, 0x62, 0x75, 0x6c,
	0x6b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x73, 0x31, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2d,
	0x72, 0x75, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bulkbeacon_v2_proto_rawDescOnce sync.Once
	file_bulkbeacon_v2_proto_rawDescData = file_bulkbeacon_v2_proto_rawDesc
)

func file_bulkbeacon_v2_proto_rawDescGZIP() []byte {
	file_bulkbeacon_v2_proto_rawDescOnce.Do(func() {
		file_bulkbeacon_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_bulkbeacon_v2_proto_rawDescData)
	})
	return file_bulkbeacon_v2_proto_rawDescData
}

var file_bulkbeacon_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bulkbeacon_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bulkbeacon_v2_proto_goTypes = []interface{}{
	(DeviceType)(0),             // 0: bulkbeacon.DeviceType
	(*Location)(nil),            // 1: bulkbeacon.Location
	(*Attribution)(nil),         // 2: bulkbeacon.Attribution
	(*DetailedPerformance)(nil), // 3: bulkbeacon.DetailedPerformance
	(*SimpleLatency)(nil),       // 4: bulkbeacon.SimpleLatency
	(*Score)(nil),               // 5: bulkbeacon.Score
	(*Payload)(nil),             // 6: bulkbeacon.Payload
	(*Measurement)(nil),         // 7: bulkbeacon.Measurement
	(*Beacon)(nil),              // 8: bulkbeacon.Beacon
	(*Beacons)(nil),             // 9: bulkbeacon.Beacons
	(*IngestResult)(nil),        // 10: bulkbeacon.IngestResult
}
var file_bulkbeacon_v2_proto_depIdxs = []int32{
	1,  // 0: bulkbeacon.Attribution.location:type_name -> bulkbeacon.Location
	0,  // 1: bulkbeacon.Attribution.device_type:type_name -> bulkbeacon.DeviceType
	2,  // 2: bulkbeacon.Payload.attribution:type_name -> bulkbeacon.Attribution
	4,  // 3: bulkbeacon.Payload.simple:type_name -> bulkbeacon.SimpleLatency
	3,  // 4: bulkbeacon.Payload.detailed:type_name -> bulkbeacon.DetailedPerformance
	5,  // 5: bulkbeacon.Payload.score:type_name -> bulkbeacon.Score
	2,  // 6: bulkbeacon.Measurement.attribution:type_name -> bulkbeacon.Attribution
	6,  // 7: bulkbeacon.Measurement.payloads:type_name -> bulkbeacon.Payload
	7,  // 8: bulkbeacon.Beacon.measurements:type_name -> bulkbeacon.Measurement
	8,  // 9: bulkbeacon.Beacons.beacons:type_name -> bulkbeacon.Beacon
	9,  // 10: bulkbeacon.PulsarDataIngestion.Ingest:input_type -> bulkbeacon.Beacons
	10, // 11: bulkbeacon.PulsarDataIngestion.Ingest:output_type -> bulkbeacon.IngestResult
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_bulkbeacon_v2_proto_init() }
func file_bulkbeacon_v2_proto_init() {
	if File_bulkbeacon_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bulkbeacon_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleLatency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Measurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beacons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bulkbeacon_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bulkbeacon_v2_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Payload_Simple)(nil),
		(*Payload_Detailed)(nil),
		(*Payload_Score)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bulkbeacon_v2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bulkbeacon_v2_proto_goTypes,
		DependencyIndexes: file_bulkbeacon_v2_proto_depIdxs,
		EnumInfos:         file_bulkbeacon_v2_proto_enumTypes,
		MessageInfos:      file_bulkbeacon_v2_proto_msgTypes,
	}.Build()
	File_bulkbeacon_v2_proto = out.File
	file_bulkbeacon_v2_proto_rawDesc = nil
	file_bulkbeacon_v2_proto_goTypes = nil
	file_bulkbeacon_v2_proto_depIdxs = nil
}
